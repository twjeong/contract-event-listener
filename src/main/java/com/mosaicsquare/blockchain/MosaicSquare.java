package com.mosaicsquare.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MosaicSquare extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b5061324a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636352211e11610104578063a22cb465116100a2578063c4d66de811610071578063c4d66de814610407578063c87b56dd1461041a578063e985e9c51461042d578063f80c78d31461046957600080fd5b8063a22cb465146103bb578063ab288629146103ce578063b88d4fde146103e1578063c4d332b7146103f457600080fd5b806385e2381c116100de57806385e2381c1461037a578063930ff5bc1461038d578063931688cb146103a057806395d89b41146103b357600080fd5b80636352211e1461034b57806370a082311461035e57806383c4c00d1461037157600080fd5b80632a55205a1161017c578063449283941161014b57806344928394146102ff57806347797617146103125780634eeaa3d0146103255780634f6ccce71461033857600080fd5b80632a55205a146102945780632f745c59146102c657806342842e0e146102d957806342966c68146102ec57600080fd5b8063095ea7b3116101b8578063095ea7b31461024757806318160ddd1461025c57806323b872dd1461026e57806324d7806c1461028157600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed366004612e94565b61047c565b60405190151581526020015b60405180910390f35b61020f6104e7565b6040516101fe9190613075565b61022f61022a366004612eff565b610579565b6040516001600160a01b0390911681526020016101fe565b61025a610255366004612e4d565b6105a0565b005b6099545b6040519081526020016101fe565b61025a61027c366004612cfe565b6106d7565b6101f261028f366004612caa565b61075f565b6102a76102a2366004612f92565b6107de565b604080516001600160a01b0390931683526020830191909152016101fe565b6102606102d4366004612e4d565b61084c565b61025a6102e7366004612cfe565b6108f4565b61025a6102fa366004612eff565b61090f565b6102a761030d366004612eff565b61097f565b61025a610320366004612caa565b610a0c565b61025a610333366004612e4d565b610b53565b610260610346366004612eff565b610c3b565b61022f610359366004612eff565b610ced565b61026061036c366004612caa565b610d52565b6101fa54610260565b61025a610388366004612caa565b610dec565b61025a61039b366004612dbb565b610f23565b61025a6103ae366004612ecc565b61105e565b61020f6110e6565b61025a6103c9366004612e20565b6110f5565b61025a6103dc366004612fb3565b611100565b61025a6103ef366004612d3e565b6112a2565b61025a610402366004612caa565b611330565b61025a610415366004612caa565b611470565b61020f610428366004612eff565b61165c565b6101f261043b366004612cc6565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61025a610477366004612f17565b611667565b60006001600160e01b031982167f4eeaa3d00000000000000000000000000000000000000000000000000000000014806104c657506001600160e01b03198216630935e01b60e21b145b156104d357506001919050565b6104dc826117c9565b92915050565b919050565b6060606580546104f69061312f565b80601f01602080910402602001604051908101604052809291908181526020018280546105229061312f565b801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058482611807565b506000908152606960205260409020546001600160a01b031690565b60006105ab82610ced565b9050806001600160a01b0316836001600160a01b0316141561063a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806106565750610656813361043b565b6106c85760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610631565b6106d2838361186b565b505050565b6106e2335b826118d9565b6107545760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610631565b6106d2838383611958565b61013054604051630935e01b60e21b81526001600160a01b03838116600483015260009216906324d7806c9060240160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190612e78565b600082815261019560209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252909190826108245760009150610844565b61271081602001518561083791906130cd565b61084191906130b9565b91505b509250929050565b600061085783610d52565b82106108cb5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610631565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6106d2838383604051806020016040528060008152506112a2565b6109183361075f565b806109275750610927336106dc565b6109735760405162461bcd60e51b815260206004820181905260248201527f63616c6c6572206973206e6f742061646d696e206e6f7220617070726f7665646044820152606401610631565b61097c81611b30565b50565b60008181526067602052604081205481906001600160a01b03166109e55760405162461bcd60e51b815260206004820152601b60248201527f4d53526f79616c74793a20496e76616c696420746f6b656e20494400000000006044820152606401610631565b505060009081526101956020526040902080546001909101546001600160a01b0390911691565b610a153361075f565b610a805760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b6001600160a01b0381163b610afd5760405162461bcd60e51b815260206004820152603260248201527f4d6f7361696353717561726520317374204d61726b657420616464726573732060448201527f6d757374206265206120436f6e747261637400000000000000000000000000006064820152608401610631565b61012e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f07e7630580d612127ff5f3bd98a1ef992bb87b379fef3b98f2e2ca1ad8e27dd8906020015b60405180910390a150565b6000610b6861012f546001600160a01b031690565b6001600160a01b03161415610bbf5760405162461bcd60e51b815260206004820152601e60248201527f4e65656420746f2073657420746865206d61726b6574206164647265737300006044820152606401610631565b61012f546001600160a01b03163314610c1a5760405162461bcd60e51b815260206004820152601460248201527f63616c6c6572206973206e6f74206d61726b65740000000000000000000000006044820152606401610631565b610c3782610c3161012f546001600160a01b031690565b83611958565b5050565b6000610c4660995490565b8210610cba5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610631565b60998281548110610cdb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152606760205260408120546001600160a01b0316806104dc5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610631565b60006001600160a01b038216610dd05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610631565b506001600160a01b031660009081526068602052604090205490565b610df53361075f565b80610e0b575061012d546001600160a01b031633145b610e575760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f74207468652061646d696e0000000000000000006044820152606401610631565b6001600160a01b0381163b610ed45760405162461bcd60e51b815260206004820152602d60248201527f4d6f736169635371756172652041646d696e2061646472657373206d7573742060448201527f6265206120436f6e7472616374000000000000000000000000000000000000006064820152608401610631565b61013080546001600160a01b0319166001600160a01b0383169081179091556040519081527f4ecadcd2af09d81e4739fad2b56d4a8669857efde2783e409d2d50f02c0cedda90602001610b48565b610f2c3361075f565b610f975760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b6000610fac61012e546001600160a01b031690565b6001600160a01b031614156110035760405162461bcd60e51b815260206004820152601e60248201527f4e65656420746f2073657420746865206d61726b6574206164647265737300006044820152606401610631565b6101fa545b6110346110148261316a565b9150816000908152606760205260409020546001600160a01b0316151590565b1561103e57611008565b611049818585611b39565b611054818684611bf2565b6101fa5550505050565b6110673361075f565b6110d25760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b8051610c37906101fb906020840190612b2a565b6060606680546104f69061312f565b610c37338383611c58565b6111093361075f565b6111745760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b6000828152606760205260409020546001600160a01b03166111d85760405162461bcd60e51b815260206004820152601b60248201527f4d53526f79616c74793a20496e76616c696420746f6b656e20494400000000006044820152606401610631565b600082815261019560205260409020546001600160a01b031661123d5760405162461bcd60e51b815260206004820152601f60248201527f4d53526f79616c74793a20496e76616c696420726f79616c747920696e666f006044820152606401610631565b600082815261019560209081526040918290206bffffffffffffffffffffffff8416600190910181905582519081529081018490527f0407bfb13082f8547671a48f4651a75492449065e76fe78d2360493a2128f4a291015b60405180910390a15050565b6112ac33836118d9565b61131e5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610631565b61132a84848484611d27565b50505050565b6113393361075f565b6113a45760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b6001600160a01b0381163b6114215760405162461bcd60e51b815260206004820152603260248201527f4d6f7361696353717561726520326e64204d61726b657420616464726573732060448201527f6d757374206265206120436f6e747261637400000000000000000000000000006064820152608401610631565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f07e7630580d612127ff5f3bd98a1ef992bb87b379fef3b98f2e2ca1ad8e27dd890602001610b48565b600054610100900460ff16158080156114905750600054600160ff909116105b806114aa5750303b1580156114aa575060005460ff166001145b61151c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610631565b6000805460ff19166001179055801561153f576000805461ff0019166101001790555b6115b36040518060400160405280600c81526020017f4d6f7361696353717561726500000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d53530000000000000000000000000000000000000000000000000000000000815250611da5565b6115bb611e1a565b6115c3611e1a565b6115cb611e1a565b6040805180820190915260078082527f697066733a2f2f000000000000000000000000000000000000000000000000006020909201918252611610916101fb91612b2a565b5061161a82611e87565b8015610c37576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611296565b60606104dc82611f9c565b6116703361075f565b6116db5760405162461bcd60e51b815260206004820152603660248201527f4d6f7361696353717561726541646d696e3a2063616c6c657220646f6573206e6044820152756f742068617665207468652041646d696e20726f6c6560501b6064820152608401610631565b6000858152606760205260409020546001600160a01b0316156117405760405162461bcd60e51b815260206004820152600c60248201527f416c7265616479207573656400000000000000000000000000000000000000006044820152606401610631565b600061175561012e546001600160a01b031690565b6001600160a01b031614156117ac5760405162461bcd60e51b815260206004820152601e60248201527f4e65656420746f2073657420746865206d61726b6574206164647265737300006044820152606401610631565b6117b7858484611b39565b6117c2858583611bf2565b5050505050565b60006001600160e01b031982167f2a55205a0000000000000000000000000000000000000000000000000000000014806104dc57506104dc82612098565b6000818152606760205260409020546001600160a01b031661097c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610631565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118a082610ced565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806118e583610ced565b9050806001600160a01b0316846001600160a01b0316148061192c57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806119505750836001600160a01b031661194584610579565b6001600160a01b0316145b949350505050565b826001600160a01b031661196b82610ced565b6001600160a01b0316146119e75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610631565b6001600160a01b038216611a625760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610631565b611a6d8383836120d6565b611a7860008261186b565b6001600160a01b0383166000908152606860205260408120805460019290611aa19084906130ec565b90915550506001600160a01b0382166000908152606860205260408120805460019290611acf9084906130a1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61097c816120e1565b6001600160a01b038216611b4c57505050565b600083815261019560209081526040918290205482516001600160a01b039182168152908516918101919091529081018490527f4acc1621219e0f74dfed5c1e739d5ddd8e7f971d89fb979a33a79c817afeac829060600160405180910390a16000928352610195602052604090922080546001600160a01b0319166001600160a01b03929092169190911781556bffffffffffffffffffffffff909116600190910155565b611bfc8284612121565b611c06838261213b565b611c1082846121e4565b816001600160a01b03167fe7cd4ce7f2a465edc730269a1305e8a48bad821e8fb7e152ec413829c01a53c48483604051611c4b929190613088565b60405180910390a2505050565b816001600160a01b0316836001600160a01b03161415611cba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610631565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611d32848484611958565b611d3e848484846121fb565b61132a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610631565b600054610100900460ff16611e105760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610631565b610c378282612353565b600054610100900460ff16611e855760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610631565b565b600054610100900460ff16611ef25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610631565b6001600160a01b0381163b611f6f5760405162461bcd60e51b815260206004820152602c60248201527f4d6f7361696353717561726541646d696e2041646472657373206d757374206260448201527f65206120436f6e747261637400000000000000000000000000000000000000006064820152608401610631565b61013080546001600160a01b039092166001600160a01b031992831617905561012d805490911633179055565b6060611fa782611807565b600082815260c9602052604081208054611fc09061312f565b80601f0160208091040260200160405190810160405280929190818152602001828054611fec9061312f565b80156120395780601f1061200e57610100808354040283529160200191612039565b820191906000526020600020905b81548152906001019060200180831161201c57829003601f168201915b50505050509050600061204a6123e5565b905080516000141561205d575092915050565b81511561208f57808260405160200161207792919061300a565b60405160208183030381529060405292505050919050565b611950846123f5565b60006001600160e01b031982167f780e9d630000000000000000000000000000000000000000000000000000000014806104dc57506104dc8261245c565b6106d28383836124f7565b6120ea816125af565b600081815260c96020526040902080546121039061312f565b15905061097c57600081815260c96020526040812061097c91612bae565b610c37828260405180602001604052806000815250612656565b6000828152606760205260409020546001600160a01b03166121c55760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608401610631565b600082815260c96020908152604090912082516106d292840190612b2a565b610c3782610c3161012e546001600160a01b031690565b60006001600160a01b0384163b1561234857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061223f903390899088908890600401613039565b602060405180830381600087803b15801561225957600080fd5b505af1925050508015612289575060408051601f3d908101601f1916820190925261228691810190612eb0565b60015b61232e573d8080156122b7576040519150601f19603f3d011682016040523d82523d6000602084013e6122bc565b606091505b5080516123265760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610631565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611950565b506001949350505050565b600054610100900460ff166123be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610631565b81516123d1906065906020850190612b2a565b5080516106d2906066906020840190612b2a565b60606101fb80546104f69061312f565b606061240082611807565b600061240a6123e5565b9050600081511161242a5760405180602001604052806000815250612455565b80612434846126d4565b60405160200161244592919061300a565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806124bf57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806104dc57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146104dc565b6001600160a01b0383166125525761254d81609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b612575565b816001600160a01b0316836001600160a01b031614612575576125758382612822565b6001600160a01b03821661258c576106d2816128bf565b826001600160a01b0316826001600160a01b0316146106d2576106d28282612998565b60006125ba82610ced565b90506125c8816000846120d6565b6125d360008361186b565b6001600160a01b03811660009081526068602052604081208054600192906125fc9084906130ec565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b61266083836129dc565b61266d60008484846121fb565b6106d25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610631565b60608161271457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561273e57806127288161316a565b91506127379050600a836130b9565b9150612718565b60008167ffffffffffffffff81111561276757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612791576020820181803683370190505b5090505b8415611950576127a66001836130ec565b91506127b3600a86613185565b6127be9060306130a1565b60f81b8183815181106127e157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061281b600a866130b9565b9450612795565b6000600161282f84610d52565b61283991906130ec565b60008381526098602052604090205490915080821461288c576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906128d1906001906130ec565b6000838152609a60205260408120546099805493945090928490811061290757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806099838154811061293657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061297c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006129a383610d52565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6001600160a01b038216612a325760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610631565b6000818152606760205260409020546001600160a01b031615612a975760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610631565b612aa3600083836120d6565b6001600160a01b0382166000908152606860205260408120805460019290612acc9084906130a1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612b369061312f565b90600052602060002090601f016020900481019282612b585760008555612b9e565b82601f10612b7157805160ff1916838001178555612b9e565b82800160010185558215612b9e579182015b82811115612b9e578251825591602001919060010190612b83565b50612baa929150612be4565b5090565b508054612bba9061312f565b6000825580601f10612bca575050565b601f01602090049060005260206000209081019061097c91905b5b80821115612baa5760008155600101612be5565b600067ffffffffffffffff80841115612c1457612c146131c5565b604051601f8501601f19908116603f01168101908282118183101715612c3c57612c3c6131c5565b81604052809350858152868686011115612c5557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612c7f578081fd5b61245583833560208501612bf9565b80356bffffffffffffffffffffffff811681146104e257600080fd5b600060208284031215612cbb578081fd5b8135612455816131db565b60008060408385031215612cd8578081fd5b8235612ce3816131db565b91506020830135612cf3816131db565b809150509250929050565b600080600060608486031215612d12578081fd5b8335612d1d816131db565b92506020840135612d2d816131db565b929592945050506040919091013590565b60008060008060808587031215612d53578081fd5b8435612d5e816131db565b93506020850135612d6e816131db565b925060408501359150606085013567ffffffffffffffff811115612d90578182fd5b8501601f81018713612da0578182fd5b612daf87823560208401612bf9565b91505092959194509250565b60008060008060808587031215612dd0578384fd5b8435612ddb816131db565b93506020850135612deb816131db565b9250612df960408601612c8e565b9150606085013567ffffffffffffffff811115612e14578182fd5b612daf87828801612c6f565b60008060408385031215612e32578182fd5b8235612e3d816131db565b91506020830135612cf3816131f0565b60008060408385031215612e5f578182fd5b8235612e6a816131db565b946020939093013593505050565b600060208284031215612e89578081fd5b8151612455816131f0565b600060208284031215612ea5578081fd5b8135612455816131fe565b600060208284031215612ec1578081fd5b8151612455816131fe565b600060208284031215612edd578081fd5b813567ffffffffffffffff811115612ef3578182fd5b61195084828501612c6f565b600060208284031215612f10578081fd5b5035919050565b600080600080600060a08688031215612f2e578283fd5b853594506020860135612f40816131db565b93506040860135612f50816131db565b9250612f5e60608701612c8e565b9150608086013567ffffffffffffffff811115612f79578182fd5b612f8588828901612c6f565b9150509295509295909350565b60008060408385031215612fa4578182fd5b50508035926020909101359150565b60008060408385031215612fc5578182fd5b82359150612fd560208401612c8e565b90509250929050565b60008151808452612ff6816020860160208601613103565b601f01601f19169290920160200192915050565b6000835161301c818460208801613103565b835190830190613030818360208801613103565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261306b6080830184612fde565b9695505050505050565b6020815260006124556020830184612fde565b8281526040602082015260006119506040830184612fde565b600082198211156130b4576130b4613199565b500190565b6000826130c8576130c86131af565b500490565b60008160001904831182151516156130e7576130e7613199565b500290565b6000828210156130fe576130fe613199565b500390565b60005b8381101561311e578181015183820152602001613106565b8381111561132a5750506000910152565b600181811c9082168061314357607f821691505b6020821081141561316457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561317e5761317e613199565b5060010190565b600082613194576131946131af565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461097c57600080fd5b801515811461097c57600080fd5b6001600160e01b03198116811461097c57600080fdfea26469706673582212200887464f17f97844f7128ef5801e6d757e84a68942078dff0e467cfba6134d9764736f6c63430008040033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETLASTTOKENID = "getLastTokenId";

    public static final String FUNC_GETROYALTYADDRESS = "getRoyaltyAddress";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTMANUALTOKENIDTOMARKETWITHURIANDROYALTY = "mintManualTokenIdToMarketWithUriAndRoyalty";

    public static final String FUNC_MINTTOMARKETWITHURIANDROYALTY = "mintToMarketWithUriAndRoyalty";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_ROYALTYINFO = "royaltyInfo";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFERTO2NDMARKET = "transferTo2ndMarket";

    public static final String FUNC_UPDATE1STMARKETADDRESS = "update1stMarketAddress";

    public static final String FUNC_UPDATE2NDMARKETADDRESS = "update2ndMarketAddress";

    public static final String FUNC_UPDATEADMINADDRESS = "updateAdminAddress";

    public static final String FUNC_UPDATEBASEURI = "updateBaseURI";

    public static final String FUNC_UPDATEROYALTYRATIO = "updateRoyaltyRatio";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BASEURIUPDATED_EVENT = new Event("BaseURIUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event MINTED_EVENT = new Event("Minted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MOSAICSQUAREADMINUPDATED_EVENT = new Event("MosaicSquareAdminUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NFTMARKETUPDATED_EVENT = new Event("NFTMarketUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TOKENROYALTYADDRESSSET_EVENT = new Event("TokenRoyaltyAddressSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENROYALTYRATIOUPDATED_EVENT = new Event("TokenRoyaltyRatioUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected MosaicSquare(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MosaicSquare(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MosaicSquare(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MosaicSquare(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BaseURIUpdatedEventResponse> getBaseURIUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BASEURIUPDATED_EVENT, transactionReceipt);
        ArrayList<BaseURIUpdatedEventResponse> responses = new ArrayList<BaseURIUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BaseURIUpdatedEventResponse typedResponse = new BaseURIUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beforeBaseURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.afterBaseURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BaseURIUpdatedEventResponse> baseURIUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BaseURIUpdatedEventResponse>() {
            @Override
            public BaseURIUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BASEURIUPDATED_EVENT, log);
                BaseURIUpdatedEventResponse typedResponse = new BaseURIUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.beforeBaseURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.afterBaseURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BaseURIUpdatedEventResponse> baseURIUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BASEURIUPDATED_EVENT));
        return baseURIUpdatedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitializedEventResponse>() {
            @Override
            public InitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIALIZED_EVENT, log);
                InitializedEventResponse typedResponse = new InitializedEventResponse();
                typedResponse.log = log;
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<MintedEventResponse> getMintedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MINTED_EVENT, transactionReceipt);
        ArrayList<MintedEventResponse> responses = new ArrayList<MintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintedEventResponse typedResponse = new MintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ipfsPath = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintedEventResponse>() {
            @Override
            public MintedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINTED_EVENT, log);
                MintedEventResponse typedResponse = new MintedEventResponse();
                typedResponse.log = log;
                typedResponse.creator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ipfsPath = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintedEventResponse> mintedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTED_EVENT));
        return mintedEventFlowable(filter);
    }

    public static List<MosaicSquareAdminUpdatedEventResponse> getMosaicSquareAdminUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MOSAICSQUAREADMINUPDATED_EVENT, transactionReceipt);
        ArrayList<MosaicSquareAdminUpdatedEventResponse> responses = new ArrayList<MosaicSquareAdminUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MosaicSquareAdminUpdatedEventResponse typedResponse = new MosaicSquareAdminUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newMarketContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MosaicSquareAdminUpdatedEventResponse> mosaicSquareAdminUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MosaicSquareAdminUpdatedEventResponse>() {
            @Override
            public MosaicSquareAdminUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MOSAICSQUAREADMINUPDATED_EVENT, log);
                MosaicSquareAdminUpdatedEventResponse typedResponse = new MosaicSquareAdminUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.newMarketContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MosaicSquareAdminUpdatedEventResponse> mosaicSquareAdminUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MOSAICSQUAREADMINUPDATED_EVENT));
        return mosaicSquareAdminUpdatedEventFlowable(filter);
    }

    public static List<NFTMarketUpdatedEventResponse> getNFTMarketUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NFTMARKETUPDATED_EVENT, transactionReceipt);
        ArrayList<NFTMarketUpdatedEventResponse> responses = new ArrayList<NFTMarketUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NFTMarketUpdatedEventResponse typedResponse = new NFTMarketUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newMarketContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NFTMarketUpdatedEventResponse> nFTMarketUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NFTMarketUpdatedEventResponse>() {
            @Override
            public NFTMarketUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NFTMARKETUPDATED_EVENT, log);
                NFTMarketUpdatedEventResponse typedResponse = new NFTMarketUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.newMarketContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NFTMarketUpdatedEventResponse> nFTMarketUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTMARKETUPDATED_EVENT));
        return nFTMarketUpdatedEventFlowable(filter);
    }

    public static List<TokenRoyaltyAddressSetEventResponse> getTokenRoyaltyAddressSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENROYALTYADDRESSSET_EVENT, transactionReceipt);
        ArrayList<TokenRoyaltyAddressSetEventResponse> responses = new ArrayList<TokenRoyaltyAddressSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenRoyaltyAddressSetEventResponse typedResponse = new TokenRoyaltyAddressSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beforeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.afterAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenRoyaltyAddressSetEventResponse> tokenRoyaltyAddressSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenRoyaltyAddressSetEventResponse>() {
            @Override
            public TokenRoyaltyAddressSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENROYALTYADDRESSSET_EVENT, log);
                TokenRoyaltyAddressSetEventResponse typedResponse = new TokenRoyaltyAddressSetEventResponse();
                typedResponse.log = log;
                typedResponse.beforeAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.afterAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenRoyaltyAddressSetEventResponse> tokenRoyaltyAddressSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENROYALTYADDRESSSET_EVENT));
        return tokenRoyaltyAddressSetEventFlowable(filter);
    }

    public static List<TokenRoyaltyRatioUpdatedEventResponse> getTokenRoyaltyRatioUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENROYALTYRATIOUPDATED_EVENT, transactionReceipt);
        ArrayList<TokenRoyaltyRatioUpdatedEventResponse> responses = new ArrayList<TokenRoyaltyRatioUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenRoyaltyRatioUpdatedEventResponse typedResponse = new TokenRoyaltyRatioUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ratio = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenRoyaltyRatioUpdatedEventResponse> tokenRoyaltyRatioUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenRoyaltyRatioUpdatedEventResponse>() {
            @Override
            public TokenRoyaltyRatioUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENROYALTYRATIOUPDATED_EVENT, log);
                TokenRoyaltyRatioUpdatedEventResponse typedResponse = new TokenRoyaltyRatioUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.ratio = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenRoyaltyRatioUpdatedEventResponse> tokenRoyaltyRatioUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENROYALTYRATIOUPDATED_EVENT));
        return tokenRoyaltyRatioUpdatedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getLastTokenId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLASTTOKENID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getRoyaltyAddress(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROYALTYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String adminContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adminContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAdmin(String sender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintManualTokenIdToMarketWithUriAndRoyalty(BigInteger tokenId, String creator, String royaltyReceiver, BigInteger secondarySaleRoyaltyRatio, String uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTMANUALTOKENIDTOMARKETWITHURIANDROYALTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, creator), 
                new org.web3j.abi.datatypes.Address(160, royaltyReceiver), 
                new org.web3j.abi.datatypes.generated.Uint96(secondarySaleRoyaltyRatio), 
                new org.web3j.abi.datatypes.Utf8String(uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintToMarketWithUriAndRoyalty(String creator, String royaltyReceiver, BigInteger secondarySaleRoyaltyRatio, String uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTTOMARKETWITHURIANDROYALTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, creator), 
                new org.web3j.abi.datatypes.Address(160, royaltyReceiver), 
                new org.web3j.abi.datatypes.generated.Uint96(secondarySaleRoyaltyRatio), 
                new org.web3j.abi.datatypes.Utf8String(uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> royaltyInfo(BigInteger tokenId, BigInteger salePrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROYALTYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(salePrice)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTo2ndMarket(String from, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERTO2NDMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> update1stMarketAddress(String market) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE1STMARKETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, market)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> update2ndMarketAddress(String market) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATE2NDMARKETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, market)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAdminAddress(String admin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEADMINADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBaseURI(String baseURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(baseURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRoyaltyRatio(BigInteger tokenId, BigInteger ratio) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEROYALTYRATIO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint96(ratio)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MosaicSquare load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MosaicSquare(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MosaicSquare load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MosaicSquare(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MosaicSquare load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MosaicSquare(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MosaicSquare load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MosaicSquare(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MosaicSquare> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MosaicSquare.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MosaicSquare> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MosaicSquare.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MosaicSquare> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MosaicSquare.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MosaicSquare> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MosaicSquare.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BaseURIUpdatedEventResponse extends BaseEventResponse {
        public String beforeBaseURI;

        public String afterBaseURI;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class MintedEventResponse extends BaseEventResponse {
        public String creator;

        public BigInteger tokenId;

        public String ipfsPath;
    }

    public static class MosaicSquareAdminUpdatedEventResponse extends BaseEventResponse {
        public String newMarketContract;
    }

    public static class NFTMarketUpdatedEventResponse extends BaseEventResponse {
        public String newMarketContract;
    }

    public static class TokenRoyaltyAddressSetEventResponse extends BaseEventResponse {
        public String beforeAddress;

        public String afterAddress;

        public BigInteger tokenId;
    }

    public static class TokenRoyaltyRatioUpdatedEventResponse extends BaseEventResponse {
        public BigInteger ratio;

        public BigInteger tokenId;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
