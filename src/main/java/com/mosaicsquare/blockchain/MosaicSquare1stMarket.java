package com.mosaicsquare.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MosaicSquare1stMarket extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50613dbd806100206000396000f3fe6080604052600436106101745760003560e01c806383a6dcb1116100cb578063aabd4ac11161007f578063dbb507f111610059578063dbb507f11461042d578063eb5143ec1461044d578063f0f442601461052b57600080fd5b8063aabd4ac11461037e578063bb5ce40d14610393578063d98b9bb51461041a57600080fd5b806399cba074116100b057806399cba074146103295780639eca672c1461033e578063a8a14fa01461035e57600080fd5b806383a6dcb114610301578063853828b61461031457600080fd5b806354c350421161012d578063704b6c0211610107578063704b6c021461029357806377955245146102b35780637ee8b2f8146102d357600080fd5b806354c350421461021057806361d027b314610230578063689051161461027357600080fd5b80633a6adce31161015e5780633a6adce3146101bb5780633ccfd60b146101db578063485cc955146101f057600080fd5b8062a300b71461017957806318a14ead1461019b575b600080fd5b34801561018557600080fd5b506101996101943660046138a1565b61054b565b005b3480156101a757600080fd5b506101996101b63660046139b1565b610646565b3480156101c757600080fd5b506101996101d6366004613944565b6108f6565b3480156101e757600080fd5b50610199610da7565b3480156101fc57600080fd5b5061019961020b366004613811565b610db2565b34801561021c57600080fd5b5061019961022b3660046139b1565b610ed5565b34801561023c57600080fd5b50606454610256906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027f57600080fd5b5061019961028e366004613849565b6111e1565b34801561029f57600080fd5b506101996102ae3660046137d9565b6112e9565b3480156102bf57600080fd5b50606554610256906001600160a01b031681565b3480156102df57600080fd5b506102f36102ee3660046137d9565b611464565b60405190815260200161026a565b61019961030f366004613849565b611479565b34801561032057600080fd5b5061019961161e565b34801561033557600080fd5b506102f3611629565b34801561034a57600080fd5b506101996103593660046137d9565b611675565b34801561036a57600080fd5b506101996103793660046138e2565b6117c0565b34801561038a57600080fd5b506102f3611b8b565b34801561039f57600080fd5b506103b36103ae366004613849565b611b9d565b60405161026a9190600060e0820190506001600160a01b0380845116835260208401516020840152604084015160408401526060840151606084015261ffff60808501511660808401528060a08501511660a08401525060c083015160c083015292915050565b610199610428366004613849565b611c77565b34801561043957600080fd5b506102f3610448366004613849565b61215b565b34801561045957600080fd5b506104eb610468366004613849565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03918216600090815261067860209081526040808320938352928152908290208251608081018452815490941684526001810154918401919091526002810154918301919091526003015461ffff16606082015290565b60405161026a919081516001600160a01b03168152602080830151908201526040808301519082015260609182015161ffff169181019190915260800190565b34801561053757600080fd5b506101996105463660046137d9565b6121a8565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b15801561058e57600080fd5b505afa1580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190613a35565b61062c5760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b60648201526084015b60405180910390fd5b6106368383612341565b61064183838361234f565b505050565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190613a35565b6107225760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b806107955760405162461bcd60e51b815260206004820152603460248201527f4d61726b6574466978656450726963653a2043616e6e6f742061646d696e206360448201527f616e63656c20776974686f757420726561736f6e0000000000000000000000006064820152608401610623565b6001600160a01b038085166000908152610678602090815260408083208784528252918290208251608081018452815490941680855260018201549285019290925260028101549284019290925260039091015461ffff1660608301526108645760405162461bcd60e51b815260206004820152602b60248201527f4d61726b6574466978656450726963653a2043616e6e6f742063616e63656c2060448201527f756e7365742070726963650000000000000000000000000000000000000000006064820152608401610623565b6001600160a01b03851660008181526106786020908152604080832088845290915280822080546001600160a01b03191681556001810183905560028101929092556003909101805461ffff19169055518591907f8013ec853a3cc0e0d33bcfced302738ab75be396ca87eec29293dac84439fccc906108e79087908790613c20565b60405180910390a35050505050565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190613a35565b6109d25760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b662386f26fc100008410156109ed662386f26fc100006123d5565b6040516020016109fd9190613b8e565b60405160208183030381529060405290610a2a5760405162461bcd60e51b81526004016106239190613c4f565b50610258821015610a3c6102586123d5565b604051602001610a4c9190613a55565b60405160208183030381529060405290610a795760405162461bcd60e51b81526004016106239190613c4f565b5061ffff811660641180610a92575061138861ffff8216115b15610ae357610aa160646123d5565b610aac6113886123d5565b604051602001610abd929190613ae7565b60408051601f198184030181529082905262461bcd60e51b825261062391600401613c4f565b610aed8787612341565b610af78787612523565b6001600160a01b0316306001600160a01b031614610b7d5760405162461bcd60e51b815260206004820152603960248201527f4d61726b657441756374696f6e3a204f6e6c79204e465420636f6e747261637460448201527f206f776e65722063616e206372656174652061756374696f6e000000000000006064820152608401610623565b6000610b898888612663565b5090506001600160a01b038116610c085760405162461bcd60e51b815260206004820152602560248201527f4d61726b657441756374696f6e3a20526f79616c747920696e666f206e6f742060448201527f666f756e640000000000000000000000000000000000000000000000000000006064820152608401610623565b6040518060e00160405280876001600160a01b03168152602001858152602001848152602001600081526020018361ffff16815260200160006001600160a01b031681526020018681525061028f60008a6001600160a01b03166001600160a01b03168152602001908152602001600020600089815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816005015590505086886001600160a01b03167fecde1ffd2965d959f69fb469e60403b746a142d4ce09ca900a52f143855db7fa88866102588a604051610d9594939291906001600160a01b0394909416845260208401929092526040830152606082015260800190565b60405180910390a35050505050505050565b610db033611675565b565b606454610100900460ff1615808015610dd25750606454600160ff909116105b80610dec5750303b158015610dec575060645460ff166001145b610e5e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610623565b6064805460ff191660011790558015610e81576064805461ff0019166101001790555b610e8b838361272e565b8015610641576064805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b158015610f1857600080fd5b505afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190613a35565b610fb15760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b806110245760405162461bcd60e51b815260206004820152603160248201527f4d61726b657441756374696f6e3a2043616e6e6f742061646d696e2063616e6360448201527f656c20776974686f757420726561736f6e0000000000000000000000000000006064820152608401610623565b6001600160a01b03808516600090815261028f60209081526040808320878452825291829020825160e0810184528154851680825260018301549382019390935260028201549381019390935260038101546060840152600481015461ffff8116608085015262010000900490931660a083015260059092015460c0820152906111165760405162461bcd60e51b815260206004820152603060248201527f4d61726b657441756374696f6e3a2043616e6e6f742063616e63656c206e6f6e60448201527f6578697374656e742061756374696f6e000000000000000000000000000000006064820152608401610623565b6001600160a01b03808616600090815261028f60209081526040808320888452909152812080546001600160a01b031916815560018101829055600281018290556003810182905560048101805475ffffffffffffffffffffffffffffffffffffffffffff191690556005015560a082015116156111a5576111a585858360a001518460c00151614e206128f1565b83856001600160a01b03167fcb6b92cecfd5793b46b4c615b92f39bb0ebef288ddac4e8b2e8190f10d649cba85856040516108e7929190613c20565b600261012e5414156112355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610623565b600261012e556001600160a01b038216600090815261028f602090815260408083208484529091529020600301546112d55760405162461bcd60e51b815260206004820152603660248201527f4d61726b657441756374696f6e3a2043616e6e6f742066696e616c697a65206160448201527f6c726561647920736574746c65642061756374696f6e000000000000000000006064820152608401610623565b6112df82826129cf565b5050600161012e55565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113649190613a35565b6113c55760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b6001600160a01b0381163b6114425760405162461bcd60e51b815260206004820152603c60248201527f41646d696e54726561737572793a2054686520636f6e74726163742061646d6960448201527f6e2061646472657373206d757374206265206120636f6e7472616374000000006064820152608401610623565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b60006114726101c483612bc4565b9392505050565b6001600160a01b038216600090815261067860209081526040808320848452909152902060018101544210156115175760405162461bcd60e51b815260206004820152602e60248201527f4d61726b6574466978656450726963653a20737461727454696d65206973206e60448201527f6f742079657420726561636865640000000000000000000000000000000000006064820152608401610623565b80546001600160a01b03166115945760405162461bcd60e51b815260206004820152602860248201527f4d61726b6574466978656450726963653a2043616e6e6f742062757920756e7360448201527f65742070726963650000000000000000000000000000000000000000000000006064820152608401610623565b80546001600160a01b03163314156116145760405162461bcd60e51b815260206004820152602b60248201527f4d61726b6574466978656450726963653a2043616e6e6f7420627579206f776e60448201527f20466978656450726963650000000000000000000000000000000000000000006064820152608401610623565b6106418383612be9565b610db0614e20612df2565b6000805b6116386101c4612fbb565b81101561167157600061164d6101c483612fc6565b915061165b90508184613c82565b925050808061166990613d14565b91505061162d565b5090565b600261012e5414156116c95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610623565b600261012e5560006116dd6101c483612bc4565b915050806117535760405162461bcd60e51b815260206004820152603160248201527f53656e6456616c75655769746846616c6c6261636b57697468647261773a204e60448201527f6f2046756e647320417661696c61626c650000000000000000000000000000006064820152608401610623565b61175f6101c483612fd5565b506117736001600160a01b03831682612fea565b816001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040516117ae91815260200190565b60405180910390a25050600161012e55565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190613a35565b61189c5760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b600083116119125760405162461bcd60e51b815260206004820152602760248201527f4d61726b6574466978656450726963653a2043616e6e6f74207365742070726960448201527f6365206f662030000000000000000000000000000000000000000000000000006064820152608401610623565b61ffff81166064118061192a575061138861ffff8216115b1561193957610aa160646123d5565b6119438686612341565b61194d8686612523565b6001600160a01b0316306001600160a01b0316146119d35760405162461bcd60e51b815260206004820152603c60248201527f4d61726b6574466978656450726963653a204f6e6c79204e465420636f6e747260448201527f616374206f776e65722063616e206372656174652061756374696f6e000000006064820152608401610623565b60006119df8787612663565b5090506001600160a01b038116611a5e5760405162461bcd60e51b815260206004820152602860248201527f4d61726b6574466978656450726963653a20526f79616c747920696e666f206e60448201527f6f7420666f756e640000000000000000000000000000000000000000000000006064820152608401610623565b6040518060800160405280866001600160a01b031681526020018481526020018581526020018361ffff168152506106786000896001600160a01b03166001600160a01b03168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548161ffff021916908361ffff16021790555090505085876001600160a01b03167fc33093bd42a84bbbc9febcc085dea2106318d0ad38e8d157fbf069cae8fbfa418787604051611b7a9291906001600160a01b03929092168252602082015260400190565b60405180910390a350505050505050565b6000611b986101c4612fbb565b905090565b611bf36040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600061ffff16815260200160006001600160a01b03168152602001600081525090565b506001600160a01b03808316600090815261028f60209081526040808320858452825291829020825160e08101845281548516815260018201549281019290925260028101549282019290925260038201546060820152600482015461ffff8116608083015262010000900490921660a08301526005015460c08201525b92915050565b6001600160a01b038216600090815261028f6020908152604080832084845290915290206001810154421015611d3b5760405162461bcd60e51b815260206004820152604160248201527f4d61726b657441756374696f6e3a2043616e6e6f7420626964206f6e20616e2060448201527f61756374696f6e207468617420686173206e6f74206265656e2073746172746560648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610623565b80546001600160a01b0316611db85760405162461bcd60e51b815260206004820152603060248201527f4d61726b657441756374696f6e3a2043616e6e6f7420626964206f6e206e6f6e60448201527f6578697374656e742061756374696f6e000000000000000000000000000000006064820152608401610623565b80546001600160a01b0316331415611e385760405162461bcd60e51b815260206004820152602d60248201527f4d61726b657441756374696f6e3a2043616e6e6f7420626964206f6e20796f7560448201527f72206f776e2061756374696f6e000000000000000000000000000000000000006064820152608401610623565b600080826003015460001415611f01578260050154341015611ec25760405162461bcd60e51b815260206004820152603260248201527f4d61726b657441756374696f6e3a2043616e6e6f7420626964206c6f7765722060448201527f7468616e207265736572766520707269636500000000000000000000000000006064820152608401610623565b34600584015560048301805475ffffffffffffffffffffffffffffffffffffffff000019163362010000021790556002830154420160038401556120f9565b8260030154421115611f7b5760405162461bcd60e51b815260206004820152602a60248201527f4d61726b657441756374696f6e3a2043616e6e6f7420626964206f6e20656e6460448201527f65642061756374696f6e000000000000000000000000000000000000000000006064820152608401610623565b60048301546201000090046001600160a01b03163314156120045760405162461bcd60e51b815260206004820152603060248201527f4d61726b657441756374696f6e3a2043616e6e6f74207265626964206f76657260448201527f206f75747374616e64696e6720626964000000000000000000000000000000006064820152608401610623565b6120118360050154613103565b3410156120865760405162461bcd60e51b815260206004820152602e60248201527f4d61726b657441756374696f6e3a20426964206d757374206265206174206c6560448201527f617374206d696e20616d6f756e740000000000000000000000000000000000006064820152608401610623565b505060058101805460048301805434909355336201000090810275ffffffffffffffffffffffffffffffffffffffff000019851617909155600384015491926001600160a01b0391900416906102584290910310156120ea57426102580160038401555b6120f985858385614e206128f1565b6003830154604080513381523460208201526001600160a01b03848116928201929092526060810185905260808101929092528591908716907ecf03bc27e4a36ae408b2546abe315b48eeb1ba5b93e132dea47481ff8dfa289060a0016108e7565b6001600160a01b038216600090815261028f602090815260408083208484529091528120600381015461219357600501549050611c71565b6121a08160050154613103565b949350505050565b606554604051630935e01b60e21b81523360048201526001600160a01b03909116906324d7806c9060240160206040518083038186803b1580156121eb57600080fd5b505afa1580156121ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122239190613a35565b6122845760405162461bcd60e51b815260206004820152602c60248201527f41646d696e3a204f6e6c79207468652061646d696e2063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608401610623565b6064546201000090046001600160a01b03163b1561230a5760405162461bcd60e51b815260206004820152603c60248201527f41646d696e54726561737572793a20546865207472656173757279206164647260448201527f6573732073686f756c64206e6f74206265206120636f6e7472616374000000006064820152608401610623565b606480546001600160a01b03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b61234b8282613154565b5050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038281166024830152604482018490528416906323b872dd90606401600060405180830381600087803b1580156123b857600080fd5b505af11580156123cc573d6000803e3d6000fd5b50505050505050565b60608161241557505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561243f578061242981613d14565b91506124389050600a83613c9a565b9150612419565b60008167ffffffffffffffff81111561246857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612492576020820181803683370190505b5090505b84156121a0576124a7600183613ccd565b91506124b4600a86613d2f565b6124bf906030613c82565b60f81b8183815181106124e257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061251c600a86613c9a565b9450612496565b60006125586001600160a01b0384167f80ac58cd000000000000000000000000000000000000000000000000000000006131d5565b156125f5576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03841690636352211e9060240160206040518083038186803b1580156125b657600080fd5b505afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee91906137f5565b9050611c71565b60405162461bcd60e51b815260206004820152602d60248201527f737570706f727473496e746572666163653a2054686520636f6e74726163742060448201527f6973206e6f7420455243373231000000000000000000000000000000000000006064820152608401610623565b6000806126806001600160a01b03851663152a902d60e11b6131d5565b156127275760405163152a902d60e11b815260048101849052612710602482015260009081906001600160a01b03871690632a55205a90604401604080518083038186803b1580156126d157600080fd5b505afa1580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127099190613874565b90925090506001600160a01b03821615612724578193508092505b50505b9250929050565b606454610100900460ff166127ab5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610623565b6001600160a01b0382163b6128285760405162461bcd60e51b815260206004820152603c60248201527f41646d696e54726561737572793a2054686520636f6e74726163742061646d6960448201527f6e2061646472657373206d757374206265206120636f6e7472616374000000006064820152608401610623565b6001600160a01b0381163b156128a65760405162461bcd60e51b815260206004820152603c60248201527f41646d696e54726561737572793a20546865207472656173757279206164647260448201527f6573732073686f756c64206e6f74206265206120636f6e7472616374000000006064820152608401610623565b606580546001600160a01b039384166001600160a01b03199091161790556064805491909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909116179055565b816128fb576129c8565b6000836001600160a01b0316838390604051600060405180830381858888f193505050503d806000811461294b576040519150601f19603f3d011682016040523d82523d6000602084013e612950565b606091505b50509050806129c65760006129676101c486612bc4565b915061297a90506101c4868684016131f1565b5050604080516001600160a01b038681168252602082018690528792908916917f7bf803aed8af4f518ceeacd0a1c496d504dba80bc650c59503d25b0518b66e6d910160405180910390a35b505b5050505050565b6001600160a01b03808316600090815261028f60209081526040808320858452825291829020825160e081018452815485168152600182015492810192909252600281015492820192909252600382015460608201819052600483015461ffff8116608084015262010000900490931660a082015260059091015460c0820152904211612ac45760405162461bcd60e51b815260206004820152603260248201527f4d61726b657441756374696f6e3a2043616e6e6f742066696e616c697a65206160448201527f756374696f6e20696e2070726f677265737300000000000000000000000000006064820152608401610623565b6001600160a01b038316600090815261028f60209081526040808320858452909152812080546001600160a01b031916815560018101829055600281018290556003810182905560048101805475ffffffffffffffffffffffffffffffffffffffffffff191690556005015560a0810151612b42908490849061234f565b600080612b5985858560c001518660800151613207565b845160a08087015160c0880151604080516001600160a01b039586168152928516602084015282015260608101859052608081018490529395509193508692908816917feeb8378773980cf940bac6d2179f8e9d0e88d106f43a77a1d8d7a7933862bd6991016108e7565b6000808080612bdc866001600160a01b0387166132ec565b9097909650945050505050565b600261012e541415612c3d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610623565b600261012e8190556001600160a01b038084166000908152610678602090815260408083208684528252918290208251608081018452815490941684526001810154918401919091529283015490820181905260039092015461ffff16606082015290341015612d155760405162461bcd60e51b815260206004820152602b60248201527f4d61726b6574466978656450726963653a2043616e6e6f74206275792061742060448201527f6c6f7765722070726963650000000000000000000000000000000000000000006064820152608401610623565b6001600160a01b038316600090815261067860209081526040808320858452909152812080546001600160a01b0319168155600181018290556002810191909155600301805461ffff19169055612d6d83833361234f565b600080612d808585348660600151613207565b8451604080516001600160a01b0392831681523360208201523481830152606081018590526080810184905290519395509193508692908816917fa6ccd11e1b716ca7e68f80675b763782f20e587c6578dc030599eb1dc6de85b8919081900360a00190a35050600161012e55505050565b600261012e541415612e465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610623565b600261012e556000612e596101c4612fbb565b905060005b81811015612fb057600080612e756101c482612fc6565b9092509050612e866101c483612fd5565b506000826001600160a01b0316828790604051600060405180830381858888f193505050503d8060008114612ed7576040519150601f19603f3d011682016040523d82523d6000602084013e612edc565b606091505b5050905080612f57576000612ef36101c485612bc4565b9150612f0690506101c4858584016131f1565b5050604080516001600160a01b03851681526020810184905260009182917f7bf803aed8af4f518ceeacd0a1c496d504dba80bc650c59503d25b0518b66e6d910160405180910390a3505050612fb0565b826001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051612f9291815260200190565b60405180910390a25050508080612fa890613d14565b915050612e5e565b5050600161012e5550565b6000611c7182613326565b6000808080612bdc8686613331565b6000611472836001600160a01b03841661335c565b8047101561303a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610623565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613087576040519150601f19603f3d011682016040523d82523d6000602084013e61308c565b606091505b50509050806106415760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610623565b600080670de0b6b3a7640000831015613129576131226103e884613cae565b9050613138565b6131356101f484613cae565b90505b61271090048061314a57505060010190565b6114728382613c82565b6001600160a01b0380831660009081526106786020908152604080832085845290915290208054909116156131cb5760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574466978656450726963653a2041637469766520627579206e6f776044820152606401610623565b6106418383613379565b60006131e0836133ed565b801561147257506114728383613438565b60006121a0846001600160a01b038516846134ee565b60008060006132188787878761350b565b6064549295509350915061324290889088906201000090046001600160a01b031686614e206128f1565b60008211801561325a57506001600160a01b03811615155b156132745761326f87878385620334506128f1565b6132e2565b60405162461bcd60e51b815260206004820152602860248201527f4d61726b6574466565733a204e6f2063726561746f722066656520746f20646960448201527f73747269627574650000000000000000000000000000000000000000000000006064820152608401610623565b5094509492505050565b600081815260028301602052604081205481908061331b5761330e85856135cc565b9250600091506127279050565b600192509050612727565b6000611c71826135d8565b6000808061333f85856135e2565b600081815260029690960160205260409095205494959350505050565b6000818152600283016020526040812081905561147283836135ee565b6001600160a01b03828116600090815261028f60209081526040808320858452909152902054161561234b5760405162461bcd60e51b815260206004820152601d60248201527f4d61726b657441756374696f6e3a204163746976652061756374696f6e0000006044820152606401610623565b6000613400826301ffc9a760e01b613438565b8015611c715750613431827fffffffff00000000000000000000000000000000000000000000000000000000613438565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156134d7575060208210155b80156134e35750600081115b979650505050505050565b600082815260028401602052604081208290556121a084846135fa565b600080600061351a8787612663565b5091506001600160a01b0382166135995760405162461bcd60e51b815260206004820152602860248201527f4d61726b6574466565733a2043726561746f7220726563697069656e7420697360448201527f206e6f74207365740000000000000000000000000000000000000000000000006064820152608401610623565b6127106135aa61ffff861687613cae565b6135b49190613c9a565b92506135c08386613ccd565b90509450945094915050565b60006114728383613606565b6000611c71825490565b6000611472838361361e565b60006114728383613656565b60006114728383613773565b60008181526001830160205260408120541515611472565b600082600001828154811061364357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000818152600183016020526040812054801561376957600061367a600183613ccd565b855490915060009061368e90600190613ccd565b905081811461370f5760008660000182815481106136bc57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106136ed57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061372e57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611c71565b6000915050611c71565b60008181526001830160205260408120546137ba57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611c71565b506000611c71565b803561ffff811681146137d457600080fd5b919050565b6000602082840312156137ea578081fd5b813561147281613d6f565b600060208284031215613806578081fd5b815161147281613d6f565b60008060408385031215613823578081fd5b823561382e81613d6f565b9150602083013561383e81613d6f565b809150509250929050565b6000806040838503121561385b578182fd5b823561386681613d6f565b946020939093013593505050565b60008060408385031215613886578182fd5b825161389181613d6f565b6020939093015192949293505050565b6000806000606084860312156138b5578081fd5b83356138c081613d6f565b92506020840135915060408401356138d781613d6f565b809150509250925092565b60008060008060008060c087890312156138fa578182fd5b863561390581613d6f565b955060208701359450604087013561391c81613d6f565b9350606087013592506080870135915061393860a088016137c2565b90509295509295509295565b600080600080600080600060e0888a03121561395e578081fd5b873561396981613d6f565b965060208801359550604088013561398081613d6f565b9450606088013593506080880135925060a088013591506139a360c089016137c2565b905092959891949750929550565b600080600080606085870312156139c6578384fd5b84356139d181613d6f565b935060208501359250604085013567ffffffffffffffff808211156139f4578384fd5b818701915087601f830112613a07578384fd5b813581811115613a15578485fd5b886020828501011115613a26578485fd5b95989497505060200194505050565b600060208284031215613a46578081fd5b81518015158114611472578182fd5b7f4d61726b657441756374696f6e3a204475726174696f6e206d7573742062652081527f6174206c65617374200000000000000000000000000000000000000000000000602082015260008251613ab3816029850160208701613ce4565b7f207365636f6e64730000000000000000000000000000000000000000000000006029939091019283015250603101919050565b7f4d61726b657441756374696f6e3a20546865206d61726b65742066656573206181527f7265206265747765656e20000000000000000000000000000000000000000000602082015260008351613b4581602b850160208801613ce4565b7f20746f2000000000000000000000000000000000000000000000000000000000602b918401918201528351613b8281602f840160208801613ce4565b01602f01949350505050565b7f4d61726b657441756374696f6e3a205072696365206d7573742062652067726581527f61746572207468616e2000000000000000000000000000000000000000000000602082015260008251613bec81602a850160208701613ce4565b7f2077656900000000000000000000000000000000000000000000000000000000602a939091019283015250602e01919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260008251806020840152613c6e816040850160208701613ce4565b601f01601f19169190910160400192915050565b60008219821115613c9557613c95613d43565b500190565b600082613ca957613ca9613d59565b500490565b6000816000190483118215151615613cc857613cc8613d43565b500290565b600082821015613cdf57613cdf613d43565b500390565b60005b83811015613cff578181015183820152602001613ce7565b83811115613d0e576000848401525b50505050565b6000600019821415613d2857613d28613d43565b5060010190565b600082613d3e57613d3e613d59565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0381168114613d8457600080fd5b5056fea264697066735822122044d8837f9173a995612239992eee41af4614dde3dc060b858320761f564ac7bf64736f6c63430008040033";

    public static final String FUNC_FIXEDPRICEBUY = "FixedPriceBuy";

    public static final String FUNC_ADMINCANCELAUCTION = "adminCancelAuction";

    public static final String FUNC_ADMINCANCELFIXEDPRICE = "adminCancelFixedPrice";

    public static final String FUNC_CONTRACTADMIN = "contractAdmin";

    public static final String FUNC_CREATEAUCTION = "createAuction";

    public static final String FUNC_CREATEFIXEDPRICE = "createFixedPrice";

    public static final String FUNC_FINALIZEAUCTION = "finalizeAuction";

    public static final String FUNC_GETAUCTIONDATA = "getAuctionData";

    public static final String FUNC_GETFIXEDPRICE = "getFixedPrice";

    public static final String FUNC_GETMINBIDAMOUNT = "getMinBidAmount";

    public static final String FUNC_GETPENDINGWITHDRAWAL = "getPendingWithdrawal";

    public static final String FUNC_GETPENDINGWITHDRAWALAMOUNT = "getPendingWithdrawalAmount";

    public static final String FUNC_GETPENDINGWITHDRAWALCOUNT = "getPendingWithdrawalCount";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PLACEBID = "placeBid";

    public static final String FUNC_RETURNNFT = "returnNFT";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_SETTREASURY = "setTreasury";

    public static final String FUNC_TREASURY = "treasury";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWALL = "withdrawAll";

    public static final String FUNC_WITHDRAWFOR = "withdrawFor";

    public static final Event AUCTIONBIDPLACED_EVENT = new Event("AuctionBidPlaced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUCTIONCANCELED_EVENT = new Event("AuctionCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AUCTIONCREATED_EVENT = new Event("AuctionCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUCTIONFINALIZED_EVENT = new Event("AuctionFinalized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FIXEDPRICECANCELED_EVENT = new Event("FixedPriceCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FIXEDPRICESET_EVENT = new Event("FixedPriceSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FIXEDPRICESOLD_EVENT = new Event("FixedPriceSold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event WITHDRAWPENDING_EVENT = new Event("WithdrawPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected MosaicSquare1stMarket(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MosaicSquare1stMarket(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MosaicSquare1stMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MosaicSquare1stMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AuctionBidPlacedEventResponse> getAuctionBidPlacedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONBIDPLACED_EVENT, transactionReceipt);
        ArrayList<AuctionBidPlacedEventResponse> responses = new ArrayList<AuctionBidPlacedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionBidPlacedEventResponse typedResponse = new AuctionBidPlacedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.originalBidder = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.originalAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionBidPlacedEventResponse> auctionBidPlacedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionBidPlacedEventResponse>() {
            @Override
            public AuctionBidPlacedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONBIDPLACED_EVENT, log);
                AuctionBidPlacedEventResponse typedResponse = new AuctionBidPlacedEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.originalBidder = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.originalAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionBidPlacedEventResponse> auctionBidPlacedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONBIDPLACED_EVENT));
        return auctionBidPlacedEventFlowable(filter);
    }

    public static List<AuctionCanceledEventResponse> getAuctionCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONCANCELED_EVENT, transactionReceipt);
        ArrayList<AuctionCanceledEventResponse> responses = new ArrayList<AuctionCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionCanceledEventResponse typedResponse = new AuctionCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionCanceledEventResponse> auctionCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionCanceledEventResponse>() {
            @Override
            public AuctionCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONCANCELED_EVENT, log);
                AuctionCanceledEventResponse typedResponse = new AuctionCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionCanceledEventResponse> auctionCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONCANCELED_EVENT));
        return auctionCanceledEventFlowable(filter);
    }

    public static List<AuctionCreatedEventResponse> getAuctionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONCREATED_EVENT, transactionReceipt);
        ArrayList<AuctionCreatedEventResponse> responses = new ArrayList<AuctionCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionCreatedEventResponse typedResponse = new AuctionCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.extensionDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reservePrice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionCreatedEventResponse> auctionCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionCreatedEventResponse>() {
            @Override
            public AuctionCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONCREATED_EVENT, log);
                AuctionCreatedEventResponse typedResponse = new AuctionCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.extensionDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.reservePrice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionCreatedEventResponse> auctionCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONCREATED_EVENT));
        return auctionCreatedEventFlowable(filter);
    }

    public static List<AuctionFinalizedEventResponse> getAuctionFinalizedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUCTIONFINALIZED_EVENT, transactionReceipt);
        ArrayList<AuctionFinalizedEventResponse> responses = new ArrayList<AuctionFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuctionFinalizedEventResponse typedResponse = new AuctionFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.mssFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuctionFinalizedEventResponse> auctionFinalizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuctionFinalizedEventResponse>() {
            @Override
            public AuctionFinalizedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUCTIONFINALIZED_EVENT, log);
                AuctionFinalizedEventResponse typedResponse = new AuctionFinalizedEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.mssFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuctionFinalizedEventResponse> auctionFinalizedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUCTIONFINALIZED_EVENT));
        return auctionFinalizedEventFlowable(filter);
    }

    public static List<FixedPriceCanceledEventResponse> getFixedPriceCanceledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(FIXEDPRICECANCELED_EVENT, transactionReceipt);
        ArrayList<FixedPriceCanceledEventResponse> responses = new ArrayList<FixedPriceCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FixedPriceCanceledEventResponse typedResponse = new FixedPriceCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FixedPriceCanceledEventResponse> fixedPriceCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FixedPriceCanceledEventResponse>() {
            @Override
            public FixedPriceCanceledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FIXEDPRICECANCELED_EVENT, log);
                FixedPriceCanceledEventResponse typedResponse = new FixedPriceCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.reason = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FixedPriceCanceledEventResponse> fixedPriceCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FIXEDPRICECANCELED_EVENT));
        return fixedPriceCanceledEventFlowable(filter);
    }

    public static List<FixedPriceSetEventResponse> getFixedPriceSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(FIXEDPRICESET_EVENT, transactionReceipt);
        ArrayList<FixedPriceSetEventResponse> responses = new ArrayList<FixedPriceSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FixedPriceSetEventResponse typedResponse = new FixedPriceSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FixedPriceSetEventResponse> fixedPriceSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FixedPriceSetEventResponse>() {
            @Override
            public FixedPriceSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FIXEDPRICESET_EVENT, log);
                FixedPriceSetEventResponse typedResponse = new FixedPriceSetEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FixedPriceSetEventResponse> fixedPriceSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FIXEDPRICESET_EVENT));
        return fixedPriceSetEventFlowable(filter);
    }

    public static List<FixedPriceSoldEventResponse> getFixedPriceSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(FIXEDPRICESOLD_EVENT, transactionReceipt);
        ArrayList<FixedPriceSoldEventResponse> responses = new ArrayList<FixedPriceSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FixedPriceSoldEventResponse typedResponse = new FixedPriceSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.mssFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FixedPriceSoldEventResponse> fixedPriceSoldEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FixedPriceSoldEventResponse>() {
            @Override
            public FixedPriceSoldEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FIXEDPRICESOLD_EVENT, log);
                FixedPriceSoldEventResponse typedResponse = new FixedPriceSoldEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.mssFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.creatorFee = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FixedPriceSoldEventResponse> fixedPriceSoldEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FIXEDPRICESOLD_EVENT));
        return fixedPriceSoldEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitializedEventResponse>() {
            @Override
            public InitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIALIZED_EVENT, log);
                InitializedEventResponse typedResponse = new InitializedEventResponse();
                typedResponse.log = log;
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<WithdrawPendingEventResponse> getWithdrawPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWPENDING_EVENT, transactionReceipt);
        ArrayList<WithdrawPendingEventResponse> responses = new ArrayList<WithdrawPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawPendingEventResponse typedResponse = new WithdrawPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawPendingEventResponse> withdrawPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawPendingEventResponse>() {
            @Override
            public WithdrawPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPENDING_EVENT, log);
                WithdrawPendingEventResponse typedResponse = new WithdrawPendingEventResponse();
                typedResponse.log = log;
                typedResponse.nftContract = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawPendingEventResponse> withdrawPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPENDING_EVENT));
        return withdrawPendingEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawalEventResponse>() {
            @Override
            public WithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWAL_EVENT, log);
                WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> FixedPriceBuy(String nftContract, BigInteger tokenId, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FIXEDPRICEBUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> adminCancelAuction(String nftContract, BigInteger tokenId, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADMINCANCELAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> adminCancelFixedPrice(String nftContract, BigInteger tokenId, String reason) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADMINCANCELFIXEDPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> contractAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createAuction(String nftContract, BigInteger tokenId, String seller, BigInteger auctionPrice, BigInteger startUnixTime, BigInteger duration, BigInteger marketFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.generated.Uint256(auctionPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(startUnixTime), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.generated.Uint16(marketFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createFixedPrice(String nftContract, BigInteger tokenId, String seller, BigInteger price, BigInteger startUnixTime, BigInteger marketFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEFIXEDPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(startUnixTime), 
                new org.web3j.abi.datatypes.generated.Uint16(marketFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeAuction(String nftContract, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALIZEAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<AuctionData> getAuctionData(String nftContract, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUCTIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<AuctionData>() {}));
        return executeRemoteCallSingleValueReturn(function, AuctionData.class);
    }

    public RemoteFunctionCall<FixedPrice> getFixedPrice(String nftContract, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIXEDPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<FixedPrice>() {}));
        return executeRemoteCallSingleValueReturn(function, FixedPrice.class);
    }

    public RemoteFunctionCall<BigInteger> getMinBidAmount(String nftContract, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMINBIDAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPendingWithdrawal(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPENDINGWITHDRAWAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPendingWithdrawalAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPENDINGWITHDRAWALAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPendingWithdrawalCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPENDINGWITHDRAWALCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _contractAdmin, String _treasury) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractAdmin), 
                new org.web3j.abi.datatypes.Address(160, _treasury)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> placeBid(String nftContract, BigInteger tokenId, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PLACEBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> returnNFT(String nftContract, BigInteger tokenId, String seller) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RETURNNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nftContract), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, seller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAdmin(String _contractAdmin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _contractAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTreasury(String _treasury) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTREASURY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasury() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TREASURY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawFor(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWFOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MosaicSquare1stMarket load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MosaicSquare1stMarket(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MosaicSquare1stMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MosaicSquare1stMarket(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MosaicSquare1stMarket load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MosaicSquare1stMarket(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MosaicSquare1stMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MosaicSquare1stMarket(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MosaicSquare1stMarket> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MosaicSquare1stMarket.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MosaicSquare1stMarket> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MosaicSquare1stMarket.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MosaicSquare1stMarket> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MosaicSquare1stMarket.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MosaicSquare1stMarket> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MosaicSquare1stMarket.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AuctionData extends StaticStruct {
        public String seller;

        public BigInteger startTime;

        public BigInteger duration;

        public BigInteger endTime;

        public BigInteger marketFee;

        public String bidder;

        public BigInteger amount;

        public AuctionData(String seller, BigInteger startTime, BigInteger duration, BigInteger endTime, BigInteger marketFee, String bidder, BigInteger amount) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(duration), 
                    new org.web3j.abi.datatypes.generated.Uint256(endTime), 
                    new org.web3j.abi.datatypes.generated.Uint16(marketFee), 
                    new org.web3j.abi.datatypes.Address(160, bidder), 
                    new org.web3j.abi.datatypes.generated.Uint256(amount));
            this.seller = seller;
            this.startTime = startTime;
            this.duration = duration;
            this.endTime = endTime;
            this.marketFee = marketFee;
            this.bidder = bidder;
            this.amount = amount;
        }

        public AuctionData(Address seller, Uint256 startTime, Uint256 duration, Uint256 endTime, Uint16 marketFee, Address bidder, Uint256 amount) {
            super(seller, startTime, duration, endTime, marketFee, bidder, amount);
            this.seller = seller.getValue();
            this.startTime = startTime.getValue();
            this.duration = duration.getValue();
            this.endTime = endTime.getValue();
            this.marketFee = marketFee.getValue();
            this.bidder = bidder.getValue();
            this.amount = amount.getValue();
        }
    }

    public static class FixedPrice extends StaticStruct {
        public String seller;

        public BigInteger startTime;

        public BigInteger price;

        public BigInteger marketFee;

        public FixedPrice(String seller, BigInteger startTime, BigInteger price, BigInteger marketFee) {
            super(new org.web3j.abi.datatypes.Address(160, seller), 
                    new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(price), 
                    new org.web3j.abi.datatypes.generated.Uint16(marketFee));
            this.seller = seller;
            this.startTime = startTime;
            this.price = price;
            this.marketFee = marketFee;
        }

        public FixedPrice(Address seller, Uint256 startTime, Uint256 price, Uint16 marketFee) {
            super(seller, startTime, price, marketFee);
            this.seller = seller.getValue();
            this.startTime = startTime.getValue();
            this.price = price.getValue();
            this.marketFee = marketFee.getValue();
        }
    }

    public static class AuctionBidPlacedEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String bidder;

        public BigInteger amount;

        public String originalBidder;

        public BigInteger originalAmount;

        public BigInteger endTime;
    }

    public static class AuctionCanceledEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String reason;
    }

    public static class AuctionCreatedEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public BigInteger duration;

        public BigInteger extensionDuration;

        public BigInteger reservePrice;
    }

    public static class AuctionFinalizedEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public String bidder;

        public BigInteger value;

        public BigInteger mssFee;

        public BigInteger creatorFee;
    }

    public static class FixedPriceCanceledEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String reason;
    }

    public static class FixedPriceSetEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public BigInteger price;
    }

    public static class FixedPriceSoldEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public String buyer;

        public BigInteger value;

        public BigInteger mssFee;

        public BigInteger creatorFee;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class WithdrawPendingEventResponse extends BaseEventResponse {
        public String nftContract;

        public BigInteger tokenId;

        public String user;

        public BigInteger amount;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger amount;
    }
}
